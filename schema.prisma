// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  email             String             @unique
  hashedPassword    String
  role              Role
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  PromptRefinements PromptRefinement[]
  UserFeedbacks     UserFeedback[]
}

model PromptRefinement {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  original      String
  refined       String?
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Attempts      Attempt[]
  UserFeedbacks UserFeedback[]
}

model Attempt {
  id                 String           @id @default(dbgenerated("gen_random_uuid()"))
  promptRefinementId String           @unique
  PromptRefinement   PromptRefinement @relation(fields: [promptRefinementId], references: [id], onDelete: Cascade)
  attemptNumber      Int
  createdAt          DateTime         @default(now())
  response           String?
}

model UserFeedback {
  id                 String           @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  promptRefinementId String
  rating             Int
  comments           String?
  createdAt          DateTime         @default(now())
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  PromptRefinement   PromptRefinement @relation(fields: [promptRefinementId], references: [id], onDelete: Cascade)
}

model SecurityEvent {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  type      String
  details   Json
  createdAt DateTime @default(now())
}

model SystemMonitor {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  eventType String
  details   Json
  createdAt DateTime @default(now())
}

enum Role {
  TUTOR
  STUDENT
  ADMIN
}

